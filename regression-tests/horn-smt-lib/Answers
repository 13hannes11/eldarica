
mccarthy91.nts.smt2
Warning: ignoring (set-info :origin "NTS benchmark converted to SMT-LIB2 using Eldarica (http://lara.epfl.ch/w/eldarica)")
Warning: ignoring (set-logic HORN)
Warning: ignoring (check-sat)
sat
(define-fun f_s1 ((A Int) (B Int) (C Int) (D Int)) Bool (and (>= B D) (<= D 111)))
(define-fun f_s3 ((A Int) (B Int) (C Int) (D Int)) Bool (and (<= C 101) (<= D 100)))
(define-fun f_sf ((A Int) (B Int) (C Int) (D Int)) Bool (or (= C 91) (and (and (>= (- B C) 10) (>= B 102)) (<= C 101))))

mccarthy92.nts.smt2
Warning: ignoring (set-info :origin "NTS benchmark converted to SMT-LIB2 using Eldarica (http://lara.epfl.ch/w/eldarica)")
Warning: ignoring (set-logic HORN)
Warning: ignoring (check-sat)
sat
(define-fun f_s1 ((A Int) (B Int) (C Int) (D Int)) Bool (and (= B D) (and (and (and (and (and (and (= (mod (- 14 B) 2) 0) (= (mod (- 12 B) 2) 0)) (= (mod (- 2 B) 2) 0)) (= (mod (* (- 1) B) 2) 0)) (= (mod (+ (- 12) B) 2) 0)) (= (mod (+ (- 2) B) 2) 0)) (= (mod B 2) 0))))
(define-fun f_s3 ((A Int) (B Int) (C Int) (D Int)) Bool (and (and (>= C 92) (<= D 100)) (and (and (and (= (mod (- 2 C) 2) 0) (= (mod (+ (- 2) C) 2) 0)) (or (<= C 99) (and (= (mod (- 4 C) 2) 0) (or (= C 102) (= C 100))))) (or (<= C 99) (and (= (mod (- 2 C) 2) 0) (or (= C 102) (= C 100)))))))
(define-fun f_sf ((A Int) (B Int) (C Int) (D Int)) Bool (or (= C 92) (and (and (= (- B C) 10) (>= B 101)) (and (and (and (= (mod (- 14 B) 2) 0) (= (mod (- 12 B) 2) 0)) (= (mod (+ (- 12) B) 2) 0)) (= (mod B 2) 0)))))

palindrome.nts.smt2
Warning: ignoring (set-info :origin "NTS benchmark converted to SMT-LIB2 using Eldarica (http://lara.epfl.ch/w/eldarica)")
Warning: ignoring (set-logic HORN)
Warning: ignoring (check-sat)
sat
(define-fun palindrome_q0 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int)) Bool (>= (+ B (- (- G F) C)) 0))
(define-fun palindrome_q2 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int)) Bool (>= (+ B (- (* (- 2) H) C)) (- 1)))
(define-fun palindrome_q4 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int)) Bool (or (>= (- (+ C (* (- 2) D)) B) (- 3)) (<= D 1)))

amotsa.smt2
Warning: ignoring (set-info :origin "http://lara.epfl.ch/w/eldarica")
Warning: ignoring (set-logic HORN)
Warning: ignoring (check-sat)
sat
(define-fun h11 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int) (U Int) (V Int) (W Int) (X Int) (Y Int) (Z Int) (A1 Int) (B1 Int) (C1 Int) (D1 Int) (E1 Int) (F1 Int) (G1 Int) (H1 Int) (I1 Int) (J1 Int) (K1 Int) (L1 Int) (M1 Int) (N1 Int) (O1 Int) (P1 Int) (Q1 Int) (R1 Int) (S1 Int) (T1 Int) (U1 Int) (V1 Int) (W1 Int) (X1 Int) (Y1 Int) (Z1 Int) (A2 Int) (B2 Int) (C2 Int) (D2 Int) (E2 Int) (F2 Int) (G2 Int) (H2 Int)) Bool (and (and (and (and (and (and (and (and (and (and (and (<= J1 X1) (<= J1 Z1)) (<= J1 D2)) (<= N1 F2)) (>= N1 E2)) (>= Q1 W1)) (>= Q1 C2)) (<= W1 1)) (<= Y1 1)) (<= A2 E2)) (>= B2 F2)) (<= C2 1)))
(define-fun h42 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int) (U Int) (V Int) (W Int) (X Int) (Y Int) (Z Int) (A1 Int) (B1 Int) (C1 Int) (D1 Int) (E1 Int) (F1 Int) (G1 Int) (H1 Int) (I1 Int) (J1 Int) (K1 Int) (L1 Int) (M1 Int) (N1 Int) (O1 Int) (P1 Int) (Q1 Int) (R1 Int) (S1 Int) (T1 Int) (U1 Int) (V1 Int) (W1 Int) (X1 Int) (Y1 Int) (Z1 Int) (A2 Int) (B2 Int) (C2 Int) (D2 Int) (E2 Int) (F2 Int) (G2 Int) (H2 Int)) Bool (and (and (and (and (and (and (and (<= J1 X1) (<= J1 D2)) (<= N1 F2)) (>= N1 E2)) (<= W1 1)) (<= A2 E2)) (>= B2 F2)) (<= C2 1)))
(define-fun h45 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int) (U Int) (V Int) (W Int) (X Int) (Y Int) (Z Int) (A1 Int) (B1 Int) (C1 Int) (D1 Int) (E1 Int) (F1 Int) (G1 Int) (H1 Int) (I1 Int) (J1 Int) (K1 Int) (L1 Int) (M1 Int) (N1 Int) (O1 Int) (P1 Int) (Q1 Int) (R1 Int) (S1 Int) (T1 Int) (U1 Int) (V1 Int) (W1 Int) (X1 Int) (Y1 Int) (Z1 Int) (A2 Int) (B2 Int) (C2 Int) (D2 Int) (E2 Int) (F2 Int) (G2 Int) (H2 Int)) Bool (and (and (and (and (and (and (and (and (and (and (<= J1 X1) (<= J1 Z1)) (<= J1 D2)) (<= N1 F2)) (>= N1 E2)) (>= Q1 W1)) (>= Q1 Y1)) (<= W1 1)) (<= A2 E2)) (>= B2 F2)) (<= C2 1)))
(define-fun h73 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int) (U Int) (V Int) (W Int) (X Int) (Y Int) (Z Int) (A1 Int) (B1 Int) (C1 Int) (D1 Int) (E1 Int) (F1 Int) (G1 Int) (H1 Int) (I1 Int) (J1 Int) (K1 Int) (L1 Int) (M1 Int) (N1 Int) (O1 Int) (P1 Int) (Q1 Int) (R1 Int) (S1 Int) (T1 Int) (U1 Int) (V1 Int) (W1 Int) (X1 Int) (Y1 Int) (Z1 Int) (A2 Int) (B2 Int) (C2 Int) (D2 Int) (E2 Int) (F2 Int) (G2 Int) (H2 Int)) Bool true)
(define-fun h82 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int) (U Int) (V Int) (W Int) (X Int) (Y Int) (Z Int) (A1 Int) (B1 Int) (C1 Int) (D1 Int) (E1 Int) (F1 Int) (G1 Int) (H1 Int) (I1 Int) (J1 Int) (K1 Int) (L1 Int) (M1 Int) (N1 Int) (O1 Int) (P1 Int) (Q1 Int) (R1 Int) (S1 Int) (T1 Int) (U1 Int) (V1 Int) (W1 Int) (X1 Int) (Y1 Int) (Z1 Int) (A2 Int) (B2 Int) (C2 Int) (D2 Int) (E2 Int) (F2 Int) (G2 Int) (H2 Int)) Bool (and (and (and (and (and (<= J1 X1) (<= J1 D2)) (<= N1 B2)) (>= N1 A2)) (>= Q1 W1)) (>= Q1 C2)))

substring.error.nts.smt2
Warning: ignoring (set-info :origin "NTS benchmark converted to SMT-LIB2 using Eldarica (http://lara.epfl.ch/w/eldarica)")
Warning: ignoring (set-logic HORN)
Warning: ignoring (check-sat)
unsat

test0.correct.pierre.nts.smt2
Warning: ignoring (set-info :origin "NTS benchmark converted to SMT-LIB2 using Eldarica (http://lara.epfl.ch/w/eldarica)")
Warning: ignoring (set-logic HORN)
Warning: ignoring (check-sat)
sat
(define-fun main_eventloop ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int) (U Int) (V Int)) Bool (or (and (= M 1) (and (and (<= L 1) (>= L 0)) (<= P 1))) (and (and (and (and (<= L 1) (>= L 0)) (<= M 1)) (>= M 0)) (<= P 0))))
(define-fun main_s2_5 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int) (U Int) (V Int)) Bool (and (and (and (and (and (= L 1) (= M 1)) (= N 0)) (= P 0)) (= Q 0)) (= T 0)))
(define-fun main_se_4 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int) (U Int) (V Int)) Bool false)
(define-fun traverse_cpost_async1_with_err_0_p2 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int)) Bool false)
(define-fun traverse_cpost_async1_with_err_0_sf ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int)) Bool false)
(define-fun traverse_cpost_async1_with_err_1_sf ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int)) Bool false)
(define-fun traverse_main_without_err_0_p3 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int)) Bool (and (and (= G 1) (= (+ I (+ P (- (* (- 1) R) S))) 0)) (<= N 0)))
(define-fun traverse_main_without_err_0_p4 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int)) Bool (and (and (= G 0) (= (+ H (+ O (- (* (- 1) R) S))) 0)) (<= N 0)))
(define-fun traverse_main_without_err_0_p5_0 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int)) Bool false)
(define-fun traverse_main_without_err_0_p5_1 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int)) Bool false)
(define-fun traverse_main_without_err_0_sf ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int)) Bool (or (and (and (and (= F 1) (= H P)) (= J 1)) (<= L 0)) (and (and (and (= F 0) (= (+ G (- M P)) 1)) (= J 1)) (<= L 1))))
(define-fun traverse_main_without_err_0_si ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int)) Bool (or (and (and (and (and (and (and (and (= D 0) (= G 1)) (= (+ I (+ P (- (* (- 1) R) S))) 0)) (= J 0)) (= M 0)) (= N 0)) (= T 0)) (and (and (and (and (and (and (and (<= C 1) (>= C 0)) (<= E 1)) (>= E 0)) (<= F 1)) (>= F 0)) (<= Q 1)) (>= Q 0))) (and (and (and (and (and (and (and (= D 0) (= G 0)) (= (+ H (+ O (- (* (- 1) R) S))) 0)) (= J 0)) (= N 0)) (= Q 0)) (= T 0)) (and (and (and (and (and (and (and (<= C 1) (>= C 0)) (<= E 1)) (>= E 0)) (<= F 1)) (>= F 0)) (<= M 1)) (>= M 0)))))
(define-fun traverse_main_without_err_1_p3 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int)) Bool (and (= (+ H (- O R)) 1) (<= N 1)))
(define-fun traverse_main_without_err_1_p4 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int)) Bool (and (= H R) (<= N 0)))
(define-fun traverse_main_without_err_1_sf ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int)) Bool (and (and (= G 1) (= J 1)) (<= L 1)))

rate_limiter.c.nts.smt2
Warning: ignoring (set-info :origin "NTS benchmark converted to SMT-LIB2 using Eldarica (http://lara.epfl.ch/w/eldarica)")
Warning: ignoring (set-logic HORN)
Warning: ignoring (check-sat)
sat
(define-fun __assert_fail_sinit ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int)) Bool false)
(define-fun main_s11 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int) (U Int) (V Int) (W Int) (X Int) (Y Int) (Z Int) (A1 Int) (B1 Int) (C1 Int) (D1 Int) (E1 Int) (F1 Int) (G1 Int) (H1 Int) (I1 Int) (J1 Int) (K1 Int) (L1 Int) (M1 Int) (N1 Int) (O1 Int) (P1 Int)) Bool (and (= G1 1) (and (and (<= O1 100) (<= P1 100)) (>= P1 (- 100)))))
(define-fun main_s15 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int) (U Int) (V Int) (W Int) (X Int) (Y Int) (Z Int) (A1 Int) (B1 Int) (C1 Int) (D1 Int) (E1 Int) (F1 Int) (G1 Int) (H1 Int) (I1 Int) (J1 Int) (K1 Int) (L1 Int) (M1 Int) (N1 Int) (O1 Int) (P1 Int)) Bool (and (and (= G1 1) (= O1 P1)) (and (<= O1 100) (>= O1 (- 100)))))
(define-fun main_s4 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int) (U Int) (V Int) (W Int) (X Int) (Y Int) (Z Int) (A1 Int) (B1 Int) (C1 Int) (D1 Int) (E1 Int) (F1 Int) (G1 Int) (H1 Int) (I1 Int) (J1 Int) (K1 Int) (L1 Int) (M1 Int) (N1 Int) (O1 Int) (P1 Int)) Bool (and (<= O1 100) (>= O1 (- 100))))
(define-fun main_s7 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int) (O Int) (P Int) (Q Int) (R Int) (S Int) (T Int) (U Int) (V Int) (W Int) (X Int) (Y Int) (Z Int) (A1 Int) (B1 Int) (C1 Int) (D1 Int) (E1 Int) (F1 Int) (G1 Int) (H1 Int) (I1 Int) (J1 Int) (K1 Int) (L1 Int) (M1 Int) (N1 Int) (O1 Int) (P1 Int)) Bool (and (= G1 1) (and (and (and (<= O1 100) (>= O1 (- 100))) (<= P1 100)) (>= P1 (- 100)))))
