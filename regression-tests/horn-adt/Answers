
simple-adt-horn.smt2
Theories: ADT(P)
sat
(define-fun I1 ((A Int)) Bool (or (and (= (right A) true) (= (left A) 0)) (and (= (right A) true) (>= (left A) 2))))
(define-fun I2 ((A Int)) Bool (and (not (= (right A) true)) (>= (left A) 1)))

bool.smt2
sat
(define-fun Inv ((A Int) (B Int)) Bool (or (and (= A false) (= B false)) (and (= A true) (= B true))))

bool-unsat.smt2
unsat

0: FALSE -> 1
1: Inv(false, false) -> 2
2: Inv(true, true)

list-synasc.smt2
Theories: ADT(Nil, Cons)
sat
(define-fun Concat ((A Int) (B Int) (C Int)) Bool (or (and (= B C) (and (= (_size A) 1) (= (* (- 1) (_size A)) (- 1)))) (and (= (+ (_size C) (- (* (- 1) (_size B)) (_size A))) (- 1)) (= (head C) (head A)))))

list-synasc-unsat.smt2
Theories: ADT(Nil, Cons)
unsat

0: FALSE -> 1
1: Concat(Nil, Nil, Cons(0, Nil)) -> 2
2: Concat(Nil, Nil, Nil)

unbounded-tree.smt2
Theories: ADT(node, nil, cons)
sat
