
simple-init.smt2
Theories: SimpleArray(1)
sat
(define-fun inv1 ((A Int) (B Int) (C Int) (D Int) (E Int)) Bool (or (= A 0) (and (>= A 1) (or (not (= D 0)) (= B E)))))

heaps.smt2
Warning: ignoring get-model
Warning: ignoring exit
Theories: SimpleArray(1)
sat
(define-fun INV1 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int)) Bool (and (and (and (= C G) (= D H)) (>= D 0)) (or (not (= A E)) (= B F))))

double-heap.smt2
Warning: ignoring get-model
Warning: ignoring exit
Theories: SimpleArray(1)
sat
(define-fun INV1 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int)) Bool (and (and (and (= C H) (= D I)) (= E J)) (or (not (= A F)) (= B G))))

array_noloop_crash.smt2
Warning: ignoring get-model
Warning: ignoring exit
Theories: SimpleArray(1)
sat

bubble-quans.smt2
Theories: SimpleArray(1)
sat
(define-fun sp0 ((A Int) (B Int) (C Int) (D Int) (E Int)) Bool (and (and (and (<= A 1) (>= A 0)) (>= C 0)) (>= E 0)))
(define-fun sp1 ((A Int) (B Int) (C Int) (D Int) (E Int)) Bool (and (and (and (and (<= A 1) (>= A 0)) (>= B 0)) (>= C 0)) (>= E 0)))

init.cleaned.smt2
Theories: SimpleArray(1)
sat
(define-fun inv1 ((A Int) (B Int) (C Int) (D Int) (E Int)) Bool (or (= A 0) (or (or (or (and (= A 1) (>= D 1)) (and (= B E) (>= A 1))) (and (and (<= A D) (>= A 1)) (>= D 2))) (and (>= A 1) (<= D (- 1))))))
(define-fun inv2 ((A Int) (B Int) (C Int) (D Int) (E Int)) Bool (or (or (or (and (= B E) (>= A 0)) (and (>= A C) (>= A 0))) (and (>= (- A D) 1) (>= A 0))) (and (>= A 0) (<= C D))))
Warning: ignoring get-model
Warning: ignoring exit
Theories: SimpleArray(1)
Loading CEGAR hints ...
sat
(define-fun INV1 ((A Int) (B Int) (C Int) (D Int) (E Int) (F Int) (G Int) (H Int) (I Int) (J Int) (K Int) (L Int) (M Int) (N Int)) Bool (or (or (or (or (or (or (or (or (or (and (and (and (and (= C K) (= E M)) (= F J)) (= (+ I (- (* (- 1) L) M)) (- 2))) (and (and (>= E 4) (>= (- G F) 1)) (>= G 1))) (and (and (and (and (= C K) (= E M)) (= G J)) (= (+ I (- (* (- 1) L) M)) (- 1))) (and (and (>= E 3) (<= F G)) (>= F 1)))) (and (and (and (= C K) (= E M)) (= (- I L) 1)) (and (and (and (>= E 4) (>= (+ F (- G J)) 1)) (>= F J)) (>= (- G J) 1)))) (and (and (and (= C K) (= E M)) (= I L)) (and (and (and (>= E 3) (>= (+ F (- G J)) 1)) (>= F J)) (>= (- G J) 1)))) (and (and (= C K) (= E M)) (and (<= E (- I L)) (>= (- I L) 2)))) (and (and (= C K) (= E M)) (and (and (and (and (>= (+ E (- L I)) 3) (>= (+ F (- G J)) 1)) (>= F J)) (>= (- G J) 1)) (>= (- I L) 2)))) (and (and (= C K) (= E M)) (and (>= (+ E (- L I)) 3) (>= (- L I) 1)))) (and (and (and (and (and (= C K) (= E 3)) (= F J)) (= (- I L) 1)) (= M 3)) (and (>= (- G F) 1) (>= G 1)))) (and (and (and (and (and (and (= C K) (= E 2)) (= F J)) (= G J)) (= (- I L) 1)) (= M 2)) (>= F 1))) (and (and (and (and (and (and (= C K) (= E 2)) (= F J)) (= G J)) (= I L)) (= M 2)) (>= F 1))))
